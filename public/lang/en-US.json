{
  "$schema": "../../schemas/plugin.lang.schema.json",

  "languageTag": "en-US",
  "fileDescription": "Strings for Dinobros' Dinostruct Plugin.",
  "text": {
    "plugins": {
      "dinobros_dinostructplugin": {
        "name": "Dinostruct",
        "description": "The official Construct 3 Plugin by Dinobros used widely in all our projects. 🦖",
        "help-url": "https://github.com/Dinobros/dinostruct-plugin#readme",

        "properties": {
          "auto-initialize": {
            "name": "Auto Initialize",
            "desc": "If enabled, the plugin will automatically initialize itself when the runtime starts."
          },
          "timeout": {
            "name": "Timeout (ms)",
            "desc": "The timeout in milliseconds to be used for network requests."
          },
          "log_events": {
            "name": "Event logging",
            "desc": "Event logging configurations."
          },
          "enable-log_events": {
            "name": "Enable Event logging",
            "desc": "If enabled, the plugin will log events to the database."
          },
          "custom-log_events-endpoint": {
            "name": "Custom Endpoint URL",
            "desc": "If set, the plugin will use this URL to log events rather than Firebase."
          },
          "firebase-sdk": {
            "name": "Firebase SDK",
            "desc": "Firebase SDK configurations."
          },
          "firebase-api_key": {
            "name": "API Key",
            "desc": "The API key to be used for the Firebase SDK."
          },
          "firebase-auth_domain": {
            "name": "Auth Domain",
            "desc": "The Auth Domain to be used for the Firebase SDK."
          },
          "firebase-database_url": {
            "name": "Database URL",
            "desc": "The Database URL to be used for the Firebase SDK."
          },
          "firebase-project_id": {
            "name": "Project ID",
            "desc": "The Project ID to be used for the Firebase SDK."
          },
          "firebase-storage_bucket": {
            "name": "Storage Bucket",
            "desc": "The Storage Bucket to be used for the Firebase SDK."
          },
          "firebase-messaging_sender_id": {
            "name": "Messaging Sender ID",
            "desc": "The Messaging Sender ID to be used for the Firebase SDK."
          },
          "firebase-app_id": {
            "name": "App ID",
            "desc": "The App ID to be used for the Firebase SDK."
          },
          "firebase-measurement_id": {
            "name": "Measurement ID",
            "desc": "The Measurement ID to be used for the Firebase SDK."
          },
          "firebase-default_region": {
            "name": "Default Region",
            "desc": "The default region to be used for the Firebase SDK."
          },
          "firebase-app_check": {
            "name": "App Check",
            "desc": "App Check configurations."
          },
          "enable-app_check": {
            "name": "Enable App Check",
            "desc": "If enabled, the plugin will use App Check to protect the Firebase services."
          },
          "recaptcha-site_key": {
            "name": "ReCAPTCHA Site Key",
            "desc": "The ReCAPTCHA Site Key to be used for App Check."
          }
        },

        "aceCategories": {
          "authentication": "Authentication",
          "error-handling": "Error Handling",
          "leaderboard": "Leaderboard & Scores",
          "log-events": "Event Logging",
          "management": "Configuration & Management"
        },

        "actions": {
          "log_in-anonymously": {
            "list-name": "Log in anonymously",
            "display-text": "Log in anonymously with username: [i]{0}[/i]",
            "description": "Log in the user anonymously.",
            "params": {
              "username": {
                "name": "Username",
                "desc": "The username to be used by the anonymous user."
              }
            }
          },
          "log_in-with-credentials": {
            "list-name": "Log in with credentials",
            "display-text": "Log in with email: [i]{0}[/i] and password: [i]{1}[/i]",
            "description": "Log in the user with email and password.",
            "params": {
              "email": {
                "name": "Email",
                "desc": "The email address of the user."
              },
              "password": {
                "name": "Password",
                "desc": "The password of the user."
              }
            }
          },
          "register-with-credentials": {
            "list-name": "Register with credentials",
            "display-text": "Register with email: [i]{0}[/i] and password: [i]{1}[/i]",
            "description": "Register the user with email and password.",
            "params": {
              "email": {
                "name": "Email",
                "desc": "The email address of the user."
              },
              "password": {
                "name": "Password",
                "desc": "The password of the user."
              }
            }
          },
          "log_out": {
            "list-name": "Log out",
            "display-text": "Log out",
            "description": "Log out the user."
          },

          "user-property-set": {
            "list-name": "Set user property",
            "display-text": "Set user property [i]{0}[/i] to [i]{1}[/i]",
            "description": "Set a property for the user.",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to set."
              },
              "value": {
                "name": "Value",
                "desc": "The value to set the property to."
              }
            }
          },

          "log-event": {
            "list-name": "Log event",
            "display-text": "Log a [i]{0}[/i] event",
            "description": "Log a event to the database.",
            "params": {
              "type": {
                "name": "Type",
                "desc": "The type of event to log."
              }
            }
          },
          "log-event-payload": {
            "list-name": "Log event with payload",
            "display-text": "Log a [i]{0}[/i] event with [i]{1}[/i] as payload to be empty: [i]{2}[/i]",
            "description": "Log a event to the database.",
            "params": {
              "type": {
                "name": "Type",
                "desc": "The type of event to log."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "log-game_start-event": {
            "list-name": "Log game start event",
            "display-text": "Log a game start event",
            "description": "Log a game start event to the database."
          },
          "log-game_start-event-payload": {
            "list-name": "Log game start event with payload",
            "display-text": "Log a game start event with [i]{0}[/i] as payload to be empty: [i]{1}[/i]",
            "description": "Log a game start event to the database.",
            "params": {
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "log-game_finish-event": {
            "list-name": "Log game finish event",
            "display-text": "Log a game finish event",
            "description": "Log a game finish event to the database."
          },
          "log-game_finish-event-payload": {
            "list-name": "Log game finish event with payload",
            "display-text": "Log a game finish event with [i]{0}[/i] as payload to be empty: [i]{1}[/i]",
            "description": "Log a game finish event to the database.",
            "params": {
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "initialize": {
            "list-name": "Initialize",
            "display-text": "Initialize",
            "description": "Initialize the plugin."
          }
        },

        "conditions": {
          "is-user-logged_in": {
            "list-name": "Is user logged in",
            "display-text": "Is user logged in",
            "description": "A condition that's true if the user is logged in."
          },

          "user-login-trigger": {
            "list-name": "On user login",
            "display-text": "On user login",
            "description": "Triggered when the user logs in."
          },
          "user-logout-trigger": {
            "list-name": "On user logout",
            "display-text": "On user logout",
            "description": "Triggered when the user logs out."
          },

          "user-any-property-set-trigger": {
            "list-name": "On any user property set",
            "display-text": "On any user property set",
            "description": "Triggered when any user property is set."
          },
          "user-specific-property-set-trigger": {
            "list-name": "On user property set",
            "display-text": "On user property [i]{0}[/i] set",
            "description": "Triggered when a specific user property is set.",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to trigger the event for."
              }
            }
          },

          "is-user-new": {
            "list-name": "Is a new user",
            "display-text": "Is a new user",
            "description": "A condition that's true if this is the first time the user logs in."
          },

          "is-user-anonymous": {
            "list-name": "Is user anonymous",
            "display-text": "Is user anonymous",
            "description": "A condition that's true if the user is anonymous."
          },

          "error-any-trigger": {
            "list-name": "On any error",
            "display-text": "On any error",
            "description": "Triggered whenever an error occurs."
          },
          "error-specific-trigger": {
            "list-name": "On specific error",
            "display-text": "On error [i]{0}[/i]",
            "description": "Triggered whenever a specified error occurs.",
            "params": {
              "code": {
                "name": "Error Code",
                "desc": "The specific error code to trigger the event for."
              }
            }
          },

          "is-initialized": {
            "list-name": "Is initialized",
            "display-text": "Is initialized",
            "description": "A condition that's true if the plugin is initialized."
          },
          "initialized-trigger": {
            "list-name": "On initialized",
            "display-text": "On initialized",
            "description": "Triggered when the plugin is initialized."
          },

          "is-device-new": {
            "list-name": "Is a new device",
            "display-text": "Is a new device",
            "description": "A condition that's true if this is the first time the device launches the game."
          }
        },

        "expressions": {
          "user-id": {
            "description": "Get the ID of the user.",
            "translated-name": "UserID"
          },
          "user-email_address": {
            "description": "Get the email address of the user.",
            "translated-name": "EmailAddress"
          },
          "user-username": {
            "description": "Get the username of the user.",
            "translated-name": "Username"
          },

          "user-property-get": {
            "description": "Get a user property value.",
            "translated-name": "GetUserProperty",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to get."
              }
            }
          },

          "user-property": {
            "description": "Get the last user property that was set.",
            "translated-name": "UserProperty"
          },

          "error-code": {
            "description": "Get the last error code that occurred.",
            "translated-name": "ErrorCode"
          },

          "error_type-unknown": {
            "description": "A constant value representing an unknown error.",
            "translated-name": "XError_Unknown"
          },
          "error_type-implementation": {
            "description": "A constant value representing an error due to an implementation issue.",
            "translated-name": "XError_Implementation"
          },

          "error_type-not_initialized": {
            "description": "A constant value representing an error due to the plugin not being initialized.",
            "translated-name": "XError_NotInitialized"
          },
          "error_type-already_initialized": {
            "description": "A constant value representing an error due to the plugin already being initialized.",
            "translated-name": "XError_AlreadyInitialized"
          },

          "error_type-missing_configuration": {
            "description": "A constant value representing an error due to a missing configuration.",
            "translated-name": "XError_MissingConfiguration"
          },

          "error_type-network": {
            "description": "A constant value representing an error due to a network error.",
            "translated-name": "XError_NetworkError"
          },
          "error_type-request": {
            "description": "A constant value representing an error due to a request error.",
            "translated-name": "XError_RequestError"
          },
          "error_type-timeout": {
            "description": "A constant value representing an error due to a timeout.",
            "translated-name": "XError_TimeoutError"
          },

          "error_type-not_authenticated": {
            "description": "A constant value representing an error due to the user not being authenticated.",
            "translated-name": "XError_NotAuthenticated"
          },
          "error_type-not_authorized": {
            "description": "A constant value representing an error due to the user not being authorized.",
            "translated-name": "XError_NotAuthorized"
          },

          "error_type-invalid_credentials": {
            "description": "A constant value representing an error due to invalid credentials.",
            "translated-name": "XError_InvalidCredentials"
          },
          "error_type-already_authenticated": {
            "description": "A constant value representing an error due to the user already being authenticated.",
            "translated-name": "XError_AlreadyAuthenticated"
          },

          "error_type-user_not_found": {
            "description": "A constant value representing an error due to the user not being found.",
            "translated-name": "XError_UserNotFound"
          },
          "error_type-user_already_exists": {
            "description": "A constant value representing an error due to the user already existing.",
            "translated-name": "XError_UserAlreadyExists"
          },

          "error_type-leaderboard_not_found": {
            "description": "A constant value representing an error due to the leaderboard not being found.",
            "translated-name": "XError_LeaderboardNotFound"
          }
        }
      }
    }
  }
}
