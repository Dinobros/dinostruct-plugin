{
  "$schema": "../../schemas/plugin.lang.schema.json",

  "languageTag": "en-US",
  "fileDescription": "Strings for Dinobros' Dinostruct Plugin.",
  "text": {
    "plugins": {
      "dinobros_dinostructplugin": {
        "name": "Dinostruct",
        "description": "The official Construct 3 Plugin by Dinobros used widely in all our projects. 🦖",
        "help-url": "https://github.com/Dinobros/dinostruct-plugin#readme",

        "properties": {
          "auto-initialize": {
            "name": "Auto Initialize",
            "desc": "If enabled, the plugin will automatically initialize itself when the runtime starts."
          },
          "timeout": {
            "name": "Timeout (ms)",
            "desc": "The timeout in milliseconds to be used for network requests."
          },
          "log_events": {
            "name": "Event logging",
            "desc": "Event logging configurations."
          },
          "enable-log_events": {
            "name": "Enable Event logging",
            "desc": "If enabled, the plugin will log events to the database."
          },
          "custom-log_events-endpoint": {
            "name": "Custom Endpoint URL",
            "desc": "If set, the plugin will use this URL to log events rather than Firebase."
          },
          "firebase-sdk": {
            "name": "Firebase SDK",
            "desc": "Firebase SDK configurations."
          },
          "firebase-api_key": {
            "name": "API Key",
            "desc": "The API key to be used for the Firebase SDK."
          },
          "firebase-auth_domain": {
            "name": "Auth Domain",
            "desc": "The Auth Domain to be used for the Firebase SDK."
          },
          "firebase-database_url": {
            "name": "Database URL",
            "desc": "The Database URL to be used for the Firebase SDK."
          },
          "firebase-project_id": {
            "name": "Project ID",
            "desc": "The Project ID to be used for the Firebase SDK."
          },
          "firebase-storage_bucket": {
            "name": "Storage Bucket",
            "desc": "The Storage Bucket to be used for the Firebase SDK."
          },
          "firebase-messaging_sender_id": {
            "name": "Messaging Sender ID",
            "desc": "The Messaging Sender ID to be used for the Firebase SDK."
          },
          "firebase-app_id": {
            "name": "App ID",
            "desc": "The App ID to be used for the Firebase SDK."
          },
          "firebase-measurement_id": {
            "name": "Measurement ID",
            "desc": "The Measurement ID to be used for the Firebase SDK."
          },
          "firebase-default_region": {
            "name": "Default Region",
            "desc": "The default region to be used for the Firebase SDK."
          },
          "firebase-app_check": {
            "name": "App Check",
            "desc": "App Check configurations."
          },
          "enable-app_check": {
            "name": "Enable App Check",
            "desc": "If enabled, the plugin will use App Check to protect the Firebase services."
          },
          "recaptcha-site_key": {
            "name": "ReCAPTCHA Site Key",
            "desc": "The ReCAPTCHA Site Key to be used for App Check."
          }
        },

        "aceCategories": {
          "authentication": "Authentication",
          "error-handling": "Error Handling",
          "integration": "Integration & Communication",
          "leaderboard": "Leaderboard & Scores",
          "log-events": "Event Logging",
          "management": "Configuration & Management",
          "polls": "Polls & Surveys"
        },

        "actions": {
          "log_in-anonymously": {
            "list-name": "Log in anonymously",
            "display-text": "Log in anonymously",
            "description": "Log in the user anonymously."
          },
          "log_in-credentials": {
            "list-name": "Log in with credentials",
            "display-text": "Log in with email address [i]{0}[/i] and password [i]{1}[/i]",
            "description": "Log in the user with email address and password.",
            "params": {
              "email_address": {
                "name": "Email Address",
                "desc": "The email address of the user."
              },
              "password": {
                "name": "Password",
                "desc": "The password of the user."
              }
            }
          },
          "register-credentials": {
            "list-name": "Register with credentials",
            "display-text": "Register with email address [i]{0}[/i] and password [i]{1}[/i]",
            "description": "Register the user with email address and password.",
            "params": {
              "email_address": {
                "name": "Email Address",
                "desc": "The email address of the user."
              },
              "password": {
                "name": "Password",
                "desc": "The password of the user."
              }
            }
          },
          "log_out": {
            "list-name": "Log out",
            "display-text": "Log out",
            "description": "Log out the user."
          },

          "user-refresh": {
            "list-name": "Refresh user",
            "display-text": "Refresh user",
            "description": "Refresh the user data."
          },

          "user-username-set": {
            "list-name": "Set username",
            "display-text": "Set username to [i]{0}[/i]",
            "description": "Set the username for the user.",
            "params": {
              "username": {
                "name": "Username",
                "desc": "The username to set."
              }
            }
          },
          "user-email_address-set": {
            "list-name": "Set email address",
            "display-text": "Set email address to [i]{0}[/i]",
            "description": "Set the email address for the user.",
            "params": {
              "email_address": {
                "name": "Email Address",
                "desc": "The email address to set."
              }
            }
          },

          "user-property-set": {
            "list-name": "Set user property",
            "display-text": "Set user property [i]{0}[/i] to [i]{1}[/i]",
            "description": "Set a property for the user.",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to set."
              },
              "value": {
                "name": "Value",
                "desc": "The value to set the property to."
              }
            }
          },

          "send-message-to-parent": {
            "list-name": "Send message to parent",
            "display-text": "Send message with origin [i]{0}[/i] to parent with [i]{1}[/i] as paylaod to be empty ([i]{2}[/i])",
            "description": "Send a message to the parent window.",
            "params": {
              "target": {
                "name": "Target",
                "desc": "The origin of the parent window to send the message to. Use `/` for same-origin policy, `*` to allow all origins or a specific origin like `https://www.dinobros.com`."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to send with the message."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after sending."
              }
            }
          },

          "load-leaderboard": {
            "list-name": "Load leaderboard",
            "display-text": "Load leaderboard on [i]{0}[/i]",
            "description": "Load the leaderboard to a given JSON object.",
            "params": {
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              }
            }
          },
          "load-level-leaderboard": {
            "list-name": "Load leaderboard for level",
            "display-text": "Load leaderboard on [i]{0}[/i] for level [i]{1}[/i]",
            "description": "Load the leaderboard to a given JSON object for a specific level.",
            "params": {
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              },
              "level": {
                "name": "Level",
                "desc": "The level to load the leaderboard for."
              }
            }
          },
          "save-score": {
            "list-name": "Save score",
            "display-text": "Save score with value [i]{0}[/i]",
            "description": "Save a score to the leaderboard.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              }
            }
          },
          "save-score-payload": {
            "list-name": "Save score with payload",
            "display-text": "Save score with value [i]{0}[/i] and [i]{1}[/i] as payload to be empty ([i]{2}[/i])",
            "description": "Save a score to the leaderboard with a payload.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the score."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after saving."
              }
            }
          },
          "save-score-load-leaderboard": {
            "list-name": "Save score and load leaderboard",
            "display-text": "Save score with value [i]{0}[/i] and load leaderboard on [i]{1}[/i]",
            "description": "Save a score to the leaderboard and load the leaderboard to a given JSON object.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              }
            }
          },
          "save-score-payload-load-leaderboard": {
            "list-name": "Save score with payload and load leaderboard",
            "display-text": "Save score with value [i]{0}[/i] and [i]{1}[/i] as payload to be empty ([i]{2}[/i]) and load leaderboard on [i]{3}[/i]",
            "description": "Save a score to the leaderboard with a payload and load the leaderboard to a given JSON object.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the score."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after saving."
              }
            }
          },
          "save-level-score": {
            "list-name": "Save score for level",
            "display-text": "Save score for level [i]{0}[/i] with value [i]{1}[/i]",
            "description": "Save a score to the leaderboard for a specific level.",
            "params": {
              "level": {
                "name": "Level",
                "desc": "The level to save the score for."
              },
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              }
            }
          },
          "save-level-score-payload": {
            "list-name": "Save score for level with payload",
            "display-text": "Save score for level [i]{0}[/i] with value [i]{1}[/i] and [i]{2}[/i] as payload to be empty ([i]{3}[/i])",
            "description": "Save a score to the leaderboard for a specific level with a payload.",
            "params": {
              "level": {
                "name": "Level",
                "desc": "The level to save the score for."
              },
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the score."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after saving."
              }
            }
          },
          "save-level-score-load-leaderboard": {
            "list-name": "Save score for level and load leaderboard",
            "display-text": "Save score for level [i]{0}[/i] with value [i]{1}[/i] and load leaderboard on [i]{2}[/i]",
            "description": "Save a score to the leaderboard for a specific level and load the leaderboard to a given JSON object.",
            "params": {
              "level": {
                "name": "Level",
                "desc": "The level to save the score for."
              },
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              }
            }
          },
          "save-level-score-payload-load-leaderboard": {
            "list-name": "Save score for level with payload and load leaderboard",
            "display-text": "Save score for level [i]{0}[/i] with value [i]{1}[/i] and [i]{2}[/i] as payload to be empty ([i]{3}[/i]) and load leaderboard on [i]{4}[/i]",
            "description": "Save a score to the leaderboard for a specific level with a payload and load the leaderboard to a given JSON object.",
            "params": {
              "level": {
                "name": "Level",
                "desc": "The level to save the score for."
              },
              "score": {
                "name": "Score",
                "desc": "The score value to save."
              },
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the leaderboard into."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the score."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after saving."
              }
            }
          },

          "log-event": {
            "list-name": "Log event",
            "display-text": "Log a [i]{0}[/i] event",
            "description": "Log a event to the database.",
            "params": {
              "type": {
                "name": "Type",
                "desc": "The type of event to log."
              }
            }
          },
          "log-event-payload": {
            "list-name": "Log event with payload",
            "display-text": "Log a [i]{0}[/i] event with [i]{1}[/i] as payload to be empty ([i]{2}[/i])",
            "description": "Log a event to the database.",
            "params": {
              "type": {
                "name": "Type",
                "desc": "The type of event to log."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "log-game_start-event": {
            "list-name": "Log game start event",
            "display-text": "Log a game start event",
            "description": "Log a game start event to the database."
          },
          "log-game_start-event-payload": {
            "list-name": "Log game start event with payload",
            "display-text": "Log a game start event with [i]{0}[/i] as payload to be empty ([i]{1}[/i])",
            "description": "Log a game start event to the database.",
            "params": {
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "log-game_finish-event": {
            "list-name": "Log game finish event",
            "display-text": "Log a game finish event",
            "description": "Log a game finish event to the database."
          },
          "log-game_finish-event-payload": {
            "list-name": "Log game finish event with payload",
            "display-text": "Log a game finish event with [i]{0}[/i] as payload to be empty ([i]{1}[/i])",
            "description": "Log a game finish event to the database.",
            "params": {
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          },

          "initialize": {
            "list-name": "Initialize",
            "display-text": "Initialize",
            "description": "Initialize the plugin."
          },

          "submit-poll-answer": {
            "list-name": "Submit poll answer",
            "display-text": "Submit poll answer to question ID [i]{0}[/i] with value [i]{1}[/i]",
            "description": "Submit an answer to a question.",
            "params": {
              "question_id": {
                "name": "Question ID",
                "desc": "The ID of the question to submit the answer for."
              },
              "answer": {
                "name": "Answer",
                "desc": "The answer to submit."
              }
            }
          },
          "submit-poll-answer-payload": {
            "list-name": "Submit poll answer with payload",
            "display-text": "Submit poll answer to question ID [i]{0}[/i] with value [i]{1}[/i] and [i]{2}[/i] as payload to be empty: [i]{3}[/i]",
            "description": "Submit an answer to a question.",
            "params": {
              "question_id": {
                "name": "Question ID",
                "desc": "The ID of the question to submit the answer for."
              },
              "answer": {
                "name": "Answer",
                "desc": "The answer to submit."
              },
              "payload": {
                "name": "Payload",
                "desc": "The payload JSON object to store with the event."
              },
              "empty": {
                "name": "Empty",
                "desc": "If true, the payload JSON object will be empty after logging."
              }
            }
          }
        },

        "conditions": {
          "is-user-logged_in": {
            "list-name": "Is user logged in",
            "display-text": "Is user logged in",
            "description": "A condition that's true if the user is logged in."
          },

          "user-login-trigger": {
            "list-name": "On user login",
            "display-text": "On user login",
            "description": "Triggered when the user logs in."
          },
          "user-logout-trigger": {
            "list-name": "On user logout",
            "display-text": "On user logout",
            "description": "Triggered when the user logs out."
          },

          "user-refresh-trigger": {
            "list-name": "On user refresh",
            "display-text": "On user refresh",
            "description": "Triggered when the user data is refreshed."
          },

          "user-username-set-trigger": {
            "list-name": "On username set",
            "display-text": "On username set",
            "description": "Triggered when the username is set."
          },
          "user-email_address-set-trigger": {
            "list-name": "On email address set",
            "display-text": "On email address set",
            "description": "Triggered when the email address is set."
          },

          "user-any-property-set-trigger": {
            "list-name": "On any user property set",
            "display-text": "On any user property set",
            "description": "Triggered when any user property is set."
          },
          "user-specific-property-set-trigger": {
            "list-name": "On user property set",
            "display-text": "On user property [i]{0}[/i] set",
            "description": "Triggered when a specific user property is set.",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to trigger the event for."
              }
            }
          },

          "is-user-new": {
            "list-name": "Is a new user",
            "display-text": "Is a new user",
            "description": "A condition that's true if this is the first time the user logs in."
          },

          "is-user-anonymous": {
            "list-name": "Is user anonymous",
            "display-text": "Is user anonymous",
            "description": "A condition that's true if the user is anonymous."
          },

          "error-action-trigger": {
            "list-name": "On action error",
            "display-text": "On [i]{0}[/i] action error",
            "description": "Triggered whenever an error occurs during a specific action being executed.",
            "params": {
              "action": {
                "name": "Action",
                "desc": "The specific action to listen for errors on.",
                "items": {
                  "LogInAnonymously": "Log in anonymously",
                  "LogInWithCredentials": "Log in with credentials",
                  "RegisterWithCredentials": "Register with credentials",
                  "RefreshUser": "Refresh user",
                  "SetUsername": "Set username",
                  "SetEmailAddress": "Set email address",
                  "SetUserProperty": "Set user property",
                  "LogOut": "Log out",
                  "LoadLeaderboard": "Load leaderboard",
                  "SaveScore": "Save score",
                  "Initialize": "Initialize",
                  "SendMessageToParent": "Send message to parent",
                  "SubmitPollAnswer": "Submit poll answer"
                }
              }
            }
          },

          "error-code-any-trigger": {
            "list-name": "On any error",
            "display-text": "On any error",
            "description": "Triggered whenever an error occurs."
          },
          "error-code-specific-trigger": {
            "list-name": "On specific error",
            "display-text": "On [i]{0}[/i] error",
            "description": "Triggered whenever a specified error occurs.",
            "params": {
              "code": {
                "name": "Error Code",
                "desc": "The specific error code to listen for.",
                "items": {
                  "UNKNOWN_ERROR": "UnknownError",
                  "IMPLEMENTATION_ERROR": "ImplementationError",
                  "NOT_INITIALIZED": "NotInitialized",
                  "ALREADY_INITIALIZED": "AlreadyInitialized",
                  "MISSING_CONFIGURATION": "MissingConfiguration",
                  "NETWORK_ERROR": "NetworkError",
                  "REQUEST_ERROR": "RequestError",
                  "TIMEOUT_ERROR": "TimeoutError",
                  "NOT_AUTHENTICATED": "NotAuthenticated",
                  "NOT_AUTHORIZED": "NotAuthorized",
                  "INVALID_CREDENTIALS": "InvalidCredentials",
                  "ALREADY_AUTHENTICATED": "AlreadyAuthenticated",
                  "USER_NOT_FOUND": "UserNotFound",
                  "USER_ALREADY_EXISTS": "UserAlreadyExists",
                  "LEADERBOARD_NOT_FOUND": "LeaderboardNotFound"
                }
              }
            }
          },

          "message-from-parent-received-trigger": {
            "list-name": "On parent message received",
            "display-text": "On parent message loaded into [i]{0}[/i]",
            "description": "Triggered when a message is received from the parent window.",
            "params": {
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the message into."
              }
            }
          },
          "typed-message-from-parent-received-trigger": {
            "list-name": "On specific parent message received",
            "display-text": "On [i]{0}[/i] parent message loaded into [i]{1}[/i]",
            "description": "Triggered when a specific message is received from the parent window.",
            "params": {
              "type": {
                "name": "Type",
                "desc": "The type of message to listen for."
              },
              "json_ref": {
                "name": "JSON Reference",
                "desc": "The JSON object to load the message into."
              }
            }
          },

          "message-to-parent-sent-trigger": {
            "list-name": "On message sent to parent",
            "display-text": "On message sent to parent",
            "description": "Triggered when a message is sent to the parent window."
          },

          "leaderboard-loaded-trigger": {
            "list-name": "On leaderboard loaded",
            "display-text": "On leaderboard loaded",
            "description": "Triggered when the leaderboard is loaded."
          },
          "score-saved-trigger": {
            "list-name": "On score saved",
            "display-text": "On score saved",
            "description": "Triggered when a score is saved."
          },

          "is-initialized": {
            "list-name": "Is initialized",
            "display-text": "Is initialized",
            "description": "A condition that's true if the plugin is initialized."
          },
          "initialized-trigger": {
            "list-name": "On initialized",
            "display-text": "On initialized",
            "description": "Triggered when the plugin is initialized."
          },

          "is-device-new": {
            "list-name": "Is a new device",
            "display-text": "Is a new device",
            "description": "A condition that's true if this is the first time the device launches the game."
          },

          "poll-answer-submitted-trigger": {
            "list-name": "On poll answer submitted",
            "display-text": "On poll answer submitted",
            "description": "Triggered when a poll answer is submitted."
          }
        },

        "expressions": {
          "user-id": {
            "description": "Get the ID of the user.",
            "translated-name": "UserID"
          },

          "user-email_address": {
            "description": "Get the email address of the user.",
            "translated-name": "EmailAddress"
          },
          "user-username": {
            "description": "Get the username of the user.",
            "translated-name": "Username"
          },

          "user-property-get": {
            "description": "Get a user property value.",
            "translated-name": "GetUserProperty",
            "params": {
              "property": {
                "name": "Property",
                "desc": "The property to get."
              }
            }
          },

          "user-property": {
            "description": "Get the last user property that was set.",
            "translated-name": "UserProperty"
          },

          "error-code": {
            "description": "Get the last error code that occurred.",
            "translated-name": "ErrorCode"
          },

          "error_type-unknown": {
            "description": "A constant value representing an unknown error.",
            "translated-name": "XError_Unknown"
          },
          "error_type-implementation": {
            "description": "A constant value representing an error due to an implementation issue.",
            "translated-name": "XError_Implementation"
          },

          "error_type-not_initialized": {
            "description": "A constant value representing an error due to the plugin not being initialized.",
            "translated-name": "XError_NotInitialized"
          },
          "error_type-already_initialized": {
            "description": "A constant value representing an error due to the plugin already being initialized.",
            "translated-name": "XError_AlreadyInitialized"
          },

          "error_type-missing_configuration": {
            "description": "A constant value representing an error due to a missing configuration.",
            "translated-name": "XError_MissingConfiguration"
          },

          "error_type-network": {
            "description": "A constant value representing an error due to a network error.",
            "translated-name": "XError_NetworkError"
          },
          "error_type-request": {
            "description": "A constant value representing an error due to a request error.",
            "translated-name": "XError_RequestError"
          },
          "error_type-timeout": {
            "description": "A constant value representing an error due to a timeout.",
            "translated-name": "XError_TimeoutError"
          },

          "error_type-not_authenticated": {
            "description": "A constant value representing an error due to the user not being authenticated.",
            "translated-name": "XError_NotAuthenticated"
          },
          "error_type-not_authorized": {
            "description": "A constant value representing an error due to the user not being authorized.",
            "translated-name": "XError_NotAuthorized"
          },

          "error_type-invalid_credentials": {
            "description": "A constant value representing an error due to invalid credentials.",
            "translated-name": "XError_InvalidCredentials"
          },
          "error_type-already_authenticated": {
            "description": "A constant value representing an error due to the user already being authenticated.",
            "translated-name": "XError_AlreadyAuthenticated"
          },

          "error_type-user_not_found": {
            "description": "A constant value representing an error due to the user not being found.",
            "translated-name": "XError_UserNotFound"
          },
          "error_type-user_already_exists": {
            "description": "A constant value representing an error due to the user already existing.",
            "translated-name": "XError_UserAlreadyExists"
          },

          "error_type-leaderboard_not_found": {
            "description": "A constant value representing an error due to the leaderboard not being found.",
            "translated-name": "XError_LeaderboardNotFound"
          }
        }
      }
    }
  }
}
